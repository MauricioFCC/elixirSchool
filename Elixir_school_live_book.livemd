# Elixir School

## Operaciones Basicas

Aridmeticas

<!-- livebook:{"break_markdown":true} -->

Elixir admite los operadores básicos `+, -, * y /` como cabría esperar. Es importante recordar que `/` siempre devolverá un flotante:

```elixir
# 4
2 + 2
```

```elixir
# 1
2 - 1
```

```elixir
# 10
2 * 5
```

```elixir
# 2.0
10 / 5
```

Si necesita la división de enteros o el resto de la división (es decir, módulo), Elixir viene con dos funciones útiles para lograrlo:

```elixir
# 2
div(10, 5)
```

```elixir
# 1
rem(10, 3)
```

Booleans

<!-- livebook:{"break_markdown":true} -->

Elixir proporciona `or || and && y not !` operadores booleanos. Estos admiten cualquier tipo. En elixir and y or en realidad se asigna a andalso y orelse en Erlang.

<!-- livebook:{"break_markdown":true} -->

Comparison

<!-- livebook:{"break_markdown":true} -->

Elixir viene con todos los operadores de comparación a los que estamos acostumbrados:

```elixir
# Comparacion
1 == 1
# Diferencia
1 != 2
# Comparacion estricta (Simbolo y tipo)
1 === "1"
# Diferencia estricta
1 !== "1"
# meno o igual
2 <= 3
# menor o igual
2 >= 3
# Mayor que
1 > 2
# Menor que
2 < 3
```

Orden de clasificación de las comparaciones:
número < átomo < referencia < función < puerto < pid < tupla < mapa < lista < cadena de bits

<!-- livebook:{"break_markdown":true} -->

String Interpolation:

<!-- livebook:{"break_markdown":true} -->

Similar a ruby

```elixir
# "jhon Doe"
name = "jhon Doe"
# "Hello jhon Doe"
"Hello #{name}"
```

String Concatenation:

<!-- livebook:{"break_markdown":true} -->

se usa `<>` para concatenar dos cadenas

```elixir
# "jhon Doe"
name = "jhon Doe"
# "Hello jhon Doe"
"Hello " <> name
```

## Basic data types

Integers:

<!-- livebook:{"break_markdown":true} -->

Soporta; Binarios, Octal y hexadecimal

```elixir
# 6
0b0110
```

```elixir
# 420
0o644
```

```elixir
# 31
0x1F
```

Floats

<!-- livebook:{"break_markdown":true} -->

Los números de punto flotante requieren un decimal después de al menos un dígito; tienen doble precisión de 64 bits y admiten `e` para valores de exponente:

```elixir
# 3.14
3.14
```

```elixir
.14 # ** (SyntaxError) iex:2: syntax error before: '.'
```

```elixir
# 1.0e-10
1.0e-10
```

Booleans:

<!-- livebook:{"break_markdown":true} -->

Elixir soporta `true` verdadero`false`  y `nil` falso

```elixir
# true
true
```

```elixir
# false
false
```

Atoms:

<!-- livebook:{"break_markdown":true} -->

Es una constante cuyo nombre es su valor. Son sinónimos de símbolos. `true` y `false` también son átomos.

<!-- livebook:{"break_markdown":true} -->

Los nombres de los módulos en Elixir también son átomos. `MyApp.MyModule` es un átomo válido, incluso si aún no se ha declarado dicho módulo.

<!-- livebook:{"break_markdown":true} -->

Los átomos también se utilizan para hacer referencia a módulos de las bibliotecas de Erlang, incluidos los integrados.

```elixir
# :foo
:foo
# false
:foo == :bar
# true
true == true
# true
false == false
# true
is_atom(MyApp.MyModule)
```

módulo de la biblioteca de Erlang

```elixir
# <<23, 104, 108>>
:crypto.strong_rand_bytes(3)
```

Strings

<!-- livebook:{"break_markdown":true} -->

Se usa codificado en UTF-8 y entre comillas dobles:

```elixir
# "Hello"
"Hello"
```

```elixir

```

```elixir
# "Soy un string"
"Soy un string"
```

Elixir también incluye tipos de datos más complejos. Aprenderemos más sobre esto cuando aprendamos sobre colecciones y funciones.

<!-- livebook:{"break_markdown":true} -->

Collections -> https://elixirschool.com/en/lessons/basics/collections

<!-- livebook:{"break_markdown":true} -->

Functions -> https://elixirschool.com/en/lessons/basics/functions

## Collestions

Las listas son colecciones simples de valores que pueden incluir múltiples tipos; las listas también pueden incluir valores no únicos:

```elixir
# [5.5, :Atomo, "Papaya"]
[5.5, :Atomo, "Papaya"]
```

Elixir implementa colecciones de listas como listas enlazadas. Esto significa que acceder a la longitud de la lista es una operación que se ejecutará en tiempo lineal **(O(n))**. Por esta razón, normalmente es más rápido anteponer que agregar:

```elixir
# [5.5, :Atomo, "Papaya"]
list = [5.5, :Atomo, "Papaya"]
# Anteponiendo (fast)
# [:Pi, 5.5, :Atomo, "Papaya"]
```

```elixir
[:Pi | list]
# Anexando (slow)
# [5.5, :Atomo, "Papaya", "Papayuela"]
list ++ ["Papayuela"]
```

**List Concatenation:**

<!-- livebook:{"break_markdown":true} -->

se utiliza `++`

<!-- livebook:{"break_markdown":true} -->

**list Subtration:**

<!-- livebook:{"break_markdown":true} -->

se proporciona a través del operador `--`

```elixir
# [1, 2, 3, 4]
[1, 2, "fake"] -- ["fake", 3, 4]
```

los valores duplicados. Para cada elemento de la derecha, la primera aparición se elimina de la izquierda:

```elixir
# [2, 3]
[1, 2, 2, 3, 2, 3] -- [1, 2, 3, 2]
```

La resta de listas utiliza una comparación estricta para hacer coincidir los valores.

```elixir
# [2]
[2] -- [2.0]
```

```elixir
# []
[2.0] -- [2.0]
```

**head and tie:**

<!-- livebook:{"break_markdown":true} -->

La cabeza es el primer elemento de la lista, mientras que la cola es una lista que contiene los elementos restantes. cabeza `hd` y cola `tl`, para trabajar con estas piezas:

```elixir
# :Pi
hd([:Pi, :Atomo, "Papaya"])
```

```elixir
# [:Atomo, "Papaya"]
tl([:Pi, :Atomo, "Papaya"])
```

Se puede utilizar la coincidencia de patrones y el operador contras | para dividir una lista en cabeza y cola.

```elixir
# [:Pi, :Atomo, "Papaya"]
[cabeza | cola] = [:Pi, :Atomo, "Papaya"]
```

```elixir
# :Pi
cabeza
```

```elixir
# [:Atomo, "Papaya"]
cola
```

**Tuples:**

<!-- livebook:{"break_markdown":true} -->

Son similares a las listas, pero se almacenan de forma contigua en la memoria. Esto hace que el acceso a su longitud sea rápido pero que la modificación sea costosa; la nueva tupla debe copiarse por completo en la memoria. Las tuplas se definen con llaves:

```elixir
# {:Pi, :Atomo, "Papaya", 2.33}
tupla = {:Pi, :Atomo, "Papaya", 2.33}
```

Es común que las *tuplas* se utilicen como mecanismo para devolver información adicional de las funciones; es de utilidad en coincidencia de patrones:

```elixir
# {:ok, "Successful!"}
{:ok, value} = {:ok, "Successful!"}
# "Successful!"
value
```

```elixir
# ** (MatchError) no match of right hand side value: {:error}
{:ok, value} = {:error}
```

**Keyword lists:**

<!-- livebook:{"break_markdown":true} -->

Las listas de palabras clave y los mapas son las colecciones asociativas de Elixir. En Elixir, una lista de palabras clave es una lista especial de tuplas de dos elementos cuyo primer elemento es un átomo; comparten rendimiento con listas:

```elixir
# [yo: "programo", hola: "mundo"]
[yo: "programo", hola: "mundo"]
```

```elixir
# [yo: "programo", hola: "mundo"]
[{:yo, "programo"}, {:hola, "mundo"}]
```

características de las listas de palabras clave resaltan su importancia:

<!-- livebook:{"break_markdown":true} -->

* Las claves son átomos.
* Las llaves están ordenadas.
* Las claves no tienen que ser únicas.

<!-- livebook:{"break_markdown":true} -->

Por estas razones, las listas de palabras clave se usan más comúnmente para pasar opciones a funciones.

<!-- livebook:{"break_markdown":true} -->

**Maps:**

<!-- livebook:{"break_markdown":true} -->

los mapas son el almacén clave-valor. A diferencia de las listas de palabras clave, permiten claves de cualquier tipo y no están ordenadas. sintaxis `%{}`:

```elixir
# %{:yo => "Programo", "hola" => :Mundo}
dev = %{:yo => "Programo", "hola" => :Mundo}
```

```elixir
# "Programo"
dev[:yo]
```

```elixir
# :Mundo
dev["hola"]
```

A partir de Elixir 1.2, las variables están permitidas como claves de mapa:

```elixir
# "hello"
key = "hello"
```

```elixir
# %{"hello" => "world"}
%{key => "world"}
```

Si se agrega un duplicado a un mapa, reemplazará el valor anterior:

```elixir
# %{yo: "Hola Mundo"}
dev = %{:yo => "Programo", :yo => "Hola Mundo"}
```

Hay una sintaxis especial para los mapas que contienen solo átomos como clave:

```elixir
# %{yo: "Programo", Hello: "World"}
%{yo: "Programo", Hello: "World"}
```

```elixir
# true
%{yo: "Programo", Hello: "World"} == %{:yo => "Programo", :Hello => "World"}
```

sintaxis especial para acceder a las claves que son átomos:

```elixir
# %{yo: "Programo", Hello: "World"}
dev = %{yo: "Programo", Hello: "World"}
```

```elixir
# "World"
dev.Hello
```

poseen su propia sintaxis para realizar operaciones de actualización (nota: esto crea un nuevo mapa):

```elixir
# %{yo: "Programo", Hello: "World"}
dev = %{yo: "Programo", Hello: "World"}
```

```elixir
# %{soy: "programador", Hello: "World"}
%{dev | soy: "programador"}
```

Esta sintaxis solo puede usarse para actualizar una clave que ya existe en el mapa de lo contrario saldrá error.

<!-- livebook:{"break_markdown":true} -->

Para crear una nueva clave, en vez utiliza `[Map.put/3](https://hexdocs.pm/elixir/Map.html#put/3)`:

```elixir
dev = %{hello: "world} #%{hello: "world"}
```

```elixir
# ** (KeyError) key :foo not found in: %{hello: "world"}
%{dev | soy: " programador elixir"}
```

```elixir
# %{:yo, "programo"}
map.put(dev, :yo, "programo en phoenix")
```
